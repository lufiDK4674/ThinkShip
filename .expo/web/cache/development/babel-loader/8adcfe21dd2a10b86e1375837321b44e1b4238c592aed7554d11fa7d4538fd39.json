{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect } from \"react\";\nimport AsyncStorage from \"react-native-web/dist/index\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport SignUp from \"./screens/SignUp\";\nimport Login from \"./screens/login\";\nimport Post from \"./screens/post\";\nimport HomeScreen from \"./screens/Home\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nfunction User() {\n  useEffect(function () {\n    checkForToken();\n  }, []);\n  var _useState = useState(\"null\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    token = _useState2[0],\n    setToken = _useState2[1];\n  var checkForToken = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var _token = yield AsyncStorage.getItem('token');\n        _token ? \"Home\" : \"Login\";\n        navigation.navigate(initialRoute);\n      } catch (error) {\n        console.error('Error retrieving token:', error);\n        navigation.navigate('Login');\n      }\n    });\n    return function checkForToken() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: initialRoute,\n      screenOptions: {\n        headerShown: false\n      },\n      children: [_jsx(Stack.Screen, {\n        name: \"SignUp\",\n        component: SignUp\n      }), _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: Login\n      }), _jsx(Stack.Screen, {\n        name: \"Post\",\n        component: Post\n      }), _jsx(Stack.Screen, {\n        name: \"Home\",\n        component: HomeScreen\n      })]\n    })\n  });\n}\nexport default User;","map":{"version":3,"names":["React","useEffect","AsyncStorage","NavigationContainer","createStackNavigator","SignUp","Login","Post","HomeScreen","jsx","_jsx","jsxs","_jsxs","Stack","User","checkForToken","_useState","useState","_useState2","_slicedToArray","token","setToken","_ref","_asyncToGenerator","getItem","navigation","navigate","initialRoute","error","console","apply","arguments","children","Navigator","initialRouteName","screenOptions","headerShown","Screen","name","component"],"sources":["C:/Users/4674k/OneDrive/Documents/Programming/React Native Training 2/App.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport AsyncStorage from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport SignUp from \"./screens/SignUp\";\r\nimport Login from \"./screens/login\";\r\nimport Post from \"./screens/post\";\r\nimport HomeScreen from \"./screens/Home\";\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nfunction User() {\r\n  useEffect(() => {\r\n    checkForToken();\r\n  }, []);\r\n  const [token, setToken] = useState(\"null\");\r\n  const checkForToken = async () => {\r\n    try {\r\n      const token = await AsyncStorage.getItem('token');\r\n      // Setting the initial route based on token existence\r\n      token ? \"Home\" : \"Login\";\r\n\r\n      // Navigate to the initial route\r\n      navigation.navigate(initialRoute);\r\n    } catch (error) {\r\n      console.error('Error retrieving token:', error);\r\n      // If an error occurs, navigate to the Login screen\r\n      navigation.navigate('Login');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator initialRouteName={initialRoute} screenOptions={{ headerShown: false }}>\r\n        <Stack.Screen name=\"SignUp\" component={SignUp} />\r\n        <Stack.Screen name=\"Login\" component={Login} />\r\n        <Stack.Screen name=\"Post\" component={Post} />\r\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\nexport default User;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,OAClCC,YAAY;AACnB,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,OAAOC,MAAM;AACb,OAAOC,KAAK;AACZ,OAAOC,IAAI;AACX,OAAOC,UAAU;AAAuB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAExC,IAAMC,KAAK,GAAGT,oBAAoB,CAAC,CAAC;AAEpC,SAASU,IAAIA,CAAA,EAAG;EACdb,SAAS,CAAC,YAAM;IACdc,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EACN,IAAAC,SAAA,GAA0BC,QAAQ,CAAC,MAAM,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAAnCI,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAMH,aAAa;IAAA,IAAAO,IAAA,GAAAC,iBAAA,CAAG,aAAY;MAChC,IAAI;QACF,IAAMH,MAAK,SAASlB,YAAY,CAACsB,OAAO,CAAC,OAAO,CAAC;QAEjDJ,MAAK,GAAG,MAAM,GAAG,OAAO;QAGxBK,UAAU,CAACC,QAAQ,CAACC,YAAY,CAAC;MACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAE/CH,UAAU,CAACC,QAAQ,CAAC,OAAO,CAAC;MAC9B;IACF,CAAC;IAAA,gBAbKX,aAAaA,CAAA;MAAA,OAAAO,IAAA,CAAAQ,KAAA,OAAAC,SAAA;IAAA;EAAA,GAalB;EAED,OACErB,IAAA,CAACP,mBAAmB;IAAA6B,QAAA,EAClBpB,KAAA,CAACC,KAAK,CAACoB,SAAS;MAACC,gBAAgB,EAAEP,YAAa;MAACQ,aAAa,EAAE;QAAEC,WAAW,EAAE;MAAM,CAAE;MAAAJ,QAAA,GACrFtB,IAAA,CAACG,KAAK,CAACwB,MAAM;QAACC,IAAI,EAAC,QAAQ;QAACC,SAAS,EAAElC;MAAO,CAAE,CAAC,EACjDK,IAAA,CAACG,KAAK,CAACwB,MAAM;QAACC,IAAI,EAAC,OAAO;QAACC,SAAS,EAAEjC;MAAM,CAAE,CAAC,EAC/CI,IAAA,CAACG,KAAK,CAACwB,MAAM;QAACC,IAAI,EAAC,MAAM;QAACC,SAAS,EAAEhC;MAAK,CAAE,CAAC,EAC7CG,IAAA,CAACG,KAAK,CAACwB,MAAM;QAACC,IAAI,EAAC,MAAM;QAACC,SAAS,EAAE/B;MAAW,CAAE,CAAC;IAAA,CACpC;EAAC,CACC,CAAC;AAE1B;AAEA,eAAeM,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}